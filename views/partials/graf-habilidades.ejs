<script src="https://d3js.org/d3.v6.min.js"></script>
<script src="/javascript/00Libs/JSONGS/index.js"></script>

<div id="graf-habilidades">
</div>

<br>

<style>
  svg {
    border: solid 1px #ccc;
  }

  .link {
    fill: none;
    stroke: #aaa;
    stroke-width: 2px;
  }

  #graf-habilidades {
    width: 100%;
    overflow: hidden;
  }

  .mouseover {
    cursor: pointer;
    transform: scale(1);
    transition: all 0.25s;
  }

  .mouseover:hover {
    transform: scale(1.5);
  }

  .mouseover2:hover img {
    border-radius: 0;
  }

  .mouseover:hover .mouseover2 {
    background: rgba(255, 255, 255, 0.6) !important;
  }

  .mouseover .mouseover2 img {
    animation: animacion 0.5s infinite alternate;
  }

  .mouseover .mouseover2 {
    animation: animacion2 0.5s infinite alternate;
  }

  .mouseover2 img {
    border: 2px solid gray;
  }

  @keyframes animacion2 {
    0% {
      color: black;
    }

    100% {
      color: lightgray;
    }
  }

  @keyframes animacion {
    0% {
      border: 3px solid black;
    }

    100% {
      border: 3px solid lightgray;
    }
  }
</style>

<script>
  let width = 1500;
  let height = width;

  d3.selection.prototype.moveToFront = function () {
    return this.each(function () {
      this.parentNode.appendChild(this);
    });
  };

  let svg = d3.select('#graf-habilidades')
    .append('svg')
    .attr('width', width)
    .attr('height', height)

  svg.on("load", responsiveD3JS)

  svg.attr("id", 'svg-graf-habilidades')

  //Redimensionar el grÃ¡fico svg cuando se redimensiona la ventana
  d3.select(window).on('resize', responsiveD3JS);

  function responsiveD3JS() {
    let w = parseFloat(d3.select("#graf-habilidades").style("width").replace("px", ""))
    d3.select("#graf-habilidades").style("height", w + "px")

    let escala = w / width;
    svg.style("transform", "scale(" + escala + ")");
    svg.style("transform-origin", "0 0");
  }

  let root

  (async function () {
    let url = "https://docs.google.com/spreadsheets/d/e/2PACX-1vRgAKWOvIQ05rKJc2aWjxqNxgpD3sSILX4gloIq4QeX7o4mFJE8E5R8KRLZ3CiutgHOyHiVszjoiwQO/pub?output=tsv"
    JSONGS_cargar(url, (hoja_gs) => {
      let raiz = hoja_gs.find(elemento => !elemento.parent)
      encontrarDescendencia(raiz)
      function encontrarDescendencia(node) {
        if (!node) {
          return
        }
        node.children = hoja_gs.filter(test => test.parent == node.id)
        node.children.forEach(child => {
          encontrarDescendencia(child)
        })
      }
      root = raiz


      let data = d3.hierarchy(root);

      let diameter = height * 0.85;
      let radius = diameter / 2;

      let sz = 60
      let txy = -30

      let tree = d3.tree()
        .size([2 * Math.PI, radius])
        .separation(function (a, b) {
          return (a.parent == b.parent ? 1 : 2) / a.depth;
        });
      let treeData = tree(data)
      let nodes = treeData.descendants();
      let links = treeData.links();
      let graphGroup = svg.append('g')
        .attr('transform', "translate(" + (width / 2) + "," + (height / 2) + ")");
      graphGroup.selectAll(".link")
        .data(links)
        .join("path")
        .attr("class", "link")
        .attr("d", d3.linkRadial()
          .angle(d => d.x)
          .radius(d => d.y+40));
      let node = graphGroup
        .selectAll(".node")
        .data(nodes)
        .join("g")
        .attr("class", "node")
        .attr("transform", function (d) {
          let a = d.x;
          return `translate(${txy}, ${txy})`
            + `rotate(${a * 180 / Math.PI - 90})`
            + `translate(${d.y+40}, 0)`
            +`rotate(${90 - a * 180 / Math.PI})`
        });

      node.on("mouseover", function () {
        var sel = d3.select(this);
        sel.moveToFront();
      });

      let g = node.append('g').attr("class", function (d) { return d.data.swal2 ? "mouseover" : ""; })

      g.on("click", function (e, d) {
        if (d.data.swal2) {
          d.data.swal2 = Function("return " + d.data.swal2)()
          swal.fire(d.data.swal2);
        }
      })


      let capa = g.append("foreignObject")
        .attr("width", 2 * sz)
        .attr("height", 2 * sz)
        .style("transform", "translate(" + txy + "px," + txy + "px) ")
        .style("overflow", "visible")
        .style("position", "relative")
        .attr("transform", function (d) {
          return (d.x < Math.PI || d.depth > 0 ? "" : "rotate(180)")
        })

      let html = capa.html(function (d) { d.data.name; })

      html.append("xhtml:div")
        .attr("class", function (d) { return "texto-siempre-arriba " + (d.data.logo ? "mouseover2" : ""); })
        .style("text-shadow", (d) => {
          let color = d.data.logo ? "white" : "black";
          return `0 2px 0 ${color}, 2px 0 0 ${color}, 0 -2px 0 ${color}, -2px 0 0 ${color}`
        })
        .style("text-align", "center")
        .style("font-weight", "bolder")
        .style("font-size", "90%")
        .style("position", "absolute")
        .style("min-width", "100%")
        .style("padding", "10px")
        .style("top", (d) => (d.data.logo ? "0" : "50%"))
        .style("transform", (d) => {
          return  d.data.logo ? "translateY(-100%) " : "translateY(-80%) "
        })
        .style("color", (d) => (d.data.logo ? "black" : "white"))
        .style("background", function (d) { return d.data.logo ? "" : `hsl(${Math.random() * 360},100%,25%)`; })
        .style("border-radius", function (d) { return d.data.logo ? "" : "20px"; })
        .html(function (d) { return d.data.id; })

      html.append("xhtml:div")
        .attr("class", "mouseover2")
        .append("xhtml:img")
        .attr("src", function (d) { return d.data.logo; })
        .style("background", "white")
        .style("display", function (d) { return d.data.logo ? "block" : "none"; })
        .attr("width", 1.3 * sz)
        .attr("height", 1.3 * sz)
        .style("margin", "auto")
        .style("object-fit", "contain")
        .style("object-position", "center")
        .style("border-radius", "50%")


    })
  })();
</script>